slip-17
/*
Q1:  Write the C-Language program which accept n names of cities and a city 
name from user and use linear search algorithm to check whether the name is 
present or not.
*/

#include<stdio.h>
#include<string.h>
typedef struct Person
{
    char name[20];
}Person;

void linearSearch(Person p1[],int n)
{
    char target[20];
    printf("Enter Name to search :");
    scanf("%s",target);
    strcpy(target,strupr(target));

  int flag=0;
    for(int i=0;i<n;i++){
        if(strcmp(p1[i].name,target)==0){
           printf("Name is found:");
           flag=1;
        }
    }
    if(flag==0)
    printf("Name is not found ");

}

int main()
{
     int n;
     printf("\nEnter n :");
     scanf("%d",&n);
     Person p1[n];
    
     for(int i=0;i<n;i++){
        printf("Enter name :");
        scanf("%s",p1[i].name);
        strcpy(p1[i].name,strupr(p1[i].name));
     }
     linearSearch(p1,n);
}
--------------------------------------------------------------------------------
/*
Q2: Write the C-Language program that checks whether a string of characters 
is palindrome or not using stack
*/
#include<stdio.h>
#include<stdlib.h>
typedef struct Stack
{
    char str[20];
    int top;
}Stack;
Stack* init()
{
    Stack *stk=(Stack *)malloc(sizeof(Stack));
    stk->top=-1;
    return stk;
}
int isEmpty(Stack *stk)
{
    return  stk->top==-1;
}
void push(Stack *stk,char ch)
{ 
     stk->str[stk->top++]=ch;
}
char pop(Stack *stk)
{
    return stk->str[--stk->top];
}
int isPalindrome(char name[])
{
    Stack *stk=init();
    for(int i=0;name[i];i++)
     push(stk,name[i]);
    while(!isEmpty(stk)){
        for(int i=0;name[i];i++){
            if(pop(stk)!=name[i])
            return 0;
        }
    }
    return 1;
}
int main()
{
    char name[20];
    printf("Enter a string :");
    scanf("%s",name);
    if(isPalindrome(name))
    printf("%s string is palindrome ",name);
    else
    printf("%s string is not palindrome ",name);
    return 0;
}
======================================================================================
slip-18
/*
Q1:    Write  the  C-Language  program  which  Accept  n  sorted  values  in  array 
from  user.  Accept  a  value  x  from  user  and  use  binary  search  algorithm  to 
check  whether  the  number  is  present  in  sorted  array  or  not  and  output  the 
position if the number is present.
*/

#include<stdio.h>

int bsearch(int arr[] ,int n)
{
    int low=0;
    int upp=n-1;
    int mid;
    int target;
    printf("Enter a target :");
    scanf("%d",&target);
    while(low<=upp)
    {
        int mid=(low+upp)/2;
        if(arr[mid]==target){
            return 1;
        }
        else if(arr[mid]>target)
        {
            upp=mid-1;
        }
        else{
            low=mid+1;
        }
    }
    return -1;
}
void printArray(int arr[],int n)
{
    for(int i=0;i<n;i++){
        printf("%d ",arr[i]);
    }
}
int main()
{
     int n;
     printf("\nEnter size of array :");
     scanf("%d",&n);
    int arr[n];
    printf("Enter array :");
    for(int i=0;i<n;i++){
        scanf("%d",&arr[i]);
    }
     if(bsearch(arr,n)==1){
        printf("\nThe element found at  ");
     }
     else{
        printf("\nThe element is not found ");
     }

}
========================================================================================
slip19
/*
Q1:  Write the C-Language program which Accept n values in array from user. 
Accept  a  value  x  from  user  and  use  sentinel  linear  search  algorithm  to  check 
whether  the  number  is  present  in  the  array  or  not  and  output  the  position  if 
the number is present.
*/
#include<stdio.h>
#include<time.h>
#include<stdlib.h>
#define max 10

void generate(int a[],int n)
{
  int i;
  srand(time(NULL));
  for(i=0;i<n;i++){
    a[i]=rand()%10;
  }

}
void sentinelSearch(int a[],int n,int k)
{
   int i,temp,index ;
   temp=a[n-1];
   a[n-1]=k;

     i=0;
   while(a[i]!=k)
    i++;
   a[n-1]=temp;
   if(i<(n-1)||a[n-1]==k)
    printf("Searched found at index %d",i+1);
   else
    printf("Not Found");

}
int main()
{
   int a[max],k,i,n,flag=0,index;
     printf("Enter Size of array:");
     scanf("%d",&n);
     generate(a,n);
    printf("Random elements are\n");
    for(i=0;i<n;i++)
      printf("%d ",a[i]);

   printf("Enter number to search: ");
    scanf("%d",&k);
   sentinelSearch(a,n,k);
}
------------------------------------------------------------------------------------------

/*
Q2:  Write  the  C-Language  program  to  Sort  a  random  array  of  n  integers 
(create  a  random  array  of  n  integers)  in  ascending  order  by  using  recursive 
Quick sort algorithm. 
*/

#include<stdio.h>

void swap(int *x,int *y)
{
    int temp=*x;
    *x=*y;
    *y=temp;
}
int partion(int arr[],int low,int upp)
{
   int pi=arr[low]; 
   int start=low;
   int end=upp;
   while(start<end)
   {
      while(arr[start]<=pi){
        start++;
      }
      while(arr[end]>pi){
        end--;
      }
      if(start<end)
      {
        swap(&arr[start],&arr[end]);
      }
   }
   swap(&arr[low],&arr[end]);
   return end;


}
void quick(int arr[],int low,int upp)
{

    if(low<upp)
    {
      int pi=partion(arr,low,upp);
      quick(arr,low,pi-1);
      quick(arr,pi+1,upp);

    }
}


int main()
{

    int n;
    printf("Enter a n :");
    scanf("%d",&n);
    int arr[n];
    for(int i=0;i<n;i++){
        scanf("%d",&arr[i]);
    }
    quick(arr,0,n-1);
    printf("Sorted array :");
    for(int i=0;i<n;i++){
        printf("%d ",arr[i]);
    }
    return 0;
}
==============================================================================
slip-20
/*
Q1:    Write  the  C-Language  program  to  Sort  a  random  array  of  n  integers 
(accept  the  value  of  n  from  user)  in  ascending  order  by  using  selection  sort 
algorithm.
*/

#include<stdio.h>
void swap(int *x,int *y)
{
    int temp=*x;
    *x=*y;
    *y=temp;
}
void selectionSort(int arr[],int n)
{
  for(int i=0;i<n;i++)
  {
    int min=arr[i];
    int index=i;
    for(int j=i+1;j<n;j++){
        if(arr[j]<min){
            min=arr[j];
            index=j;
        }
    }
    swap(&arr[i],&arr[index]);
  }

}
int main()
{
    int n;
    printf("Enter size of array :");
    scanf("%d",&n);
    int arr[n];
    printf("Enter a array :");
    for(int i=0;i<n;i++)
    {
        scanf("%d",&arr[i]);
    }
    selectionSort(arr,n);
    printf("Sorted array :");
    for(int i=0;i<n;i++)
    {
        printf("%d ",arr[i]);
    }

    return 0;
}
-----------------------------------------------------------------------------------------------
/*
Q2:  Write  the  C-Language  menu  driven  program  to  implement  singly  linear 
linked list of integers. 
*/

#include<stdio.h>
#include<stdlib.h>

typedef struct Node
{
    int val;
    struct Node *next;
}Node;

Node *createNode(int n)
{
    Node *temp=NULL,*newnode=NULL,*head=NULL;
    for(int i=0;i<n;i++){
    newnode=(Node *)malloc(sizeof(Node));
    newnode->val=0;
    newnode->next=NULL;
    if(newnode==NULL){
        printf("ERROR:no memory available \n");
        exit(0);
    }
    if(head==NULL)
    {
        head=temp=newnode;
    }
    else{
        temp->next=newnode;
        temp=newnode;
    }
    }
    return head;
}
Node *insertVal(Node *head)
{
    int i=1;
    for(Node *temp=head;temp!=NULL;temp=temp->next)
    {
        printf("Enter value into Node %d :",i);
        scanf("%d",&temp->val);
         i++;
    }
    return head;
}
Node *insertAtPos(Node *head,int pos,int val)
{
    int i=1;
    Node *p1=head;
    Node *newnode=createNode(1);
    newnode->val=val;
    for(Node *temp=head;temp!=NULL;temp=temp->next)
    {
        if(i==pos){
             p1->next=newnode;
             newnode->next=temp;
        }else{
            p1=temp;
        }
        i++;
    }
    return head;
}
Node *deleteAtPos(Node *head,int pos)
{
    Node *p1=head;
    int i=1;
     for(Node *temp=head;temp!=NULL;temp=temp->next)
    {
        if(i==pos){
             p1->next=temp->next;
        }else{
            p1=temp;
        }
        i++;
    }
    return head;
}
Node *deleteAtVal(Node *head,int val)
{
    Node *p1=head;
   
     for(Node *temp=head;temp!=NULL;temp=temp->next)
    {
        if(temp->val==val){
             p1->next=temp->next;
        }else{
            p1=temp;
        }
    }
    return head;
}
Node *append(Node *head,int val)
{
    Node *newnode=createNode(1);
    newnode->val=val;
    Node *temp=head;
   for(temp=head;temp!=NULL;temp=temp->next)
   {
     if(temp->next==NULL){
        temp->next=newnode;
        break;
     }
    }
   return head;

}
void printList(Node *head)
{
    for(Node *temp=head;temp!=NULL;temp=temp->next)
    {
        printf("%d ",temp->val);
    }
    printf("\n");
   
}
void menu()
{
    printf("1]Enter to create List\n");
    printf("2]Enter to insert Value \n");
    printf("3]Enter insert value at pos\n");
    printf("4]Enter to delete by value\n");
    printf("5]Enter to delete by position\n");
    printf("6]Enter to append element into list\n");
    printf("7]Enter to display list\n");
    printf("8]Enter to exit\n");
}

void operations()
{
    menu();
    int key;
     Node *head;
    int n,pos,val;
    while(1){
    printf("Enter a key :");
    scanf("%d",&key);
   
    switch(key)
    { 
        case 1:
           printf("Enter how many nodes wants to create :");
           scanf("%d",&n);
           head=createNode(n);
           if(head!=NULL){
           printf("List created succefully \n");
           printf("Please insert value in it\n");
           }
           else
           printf("Unable to ceate List");
        break;

        case 2:
           head=insertVal(head);
           if(head!=NULL)
           printf("value insertd  succefully \n");
           else
           printf("Unable to ceate List");
        break;
        case 3:
           printf("Enter value :");
           scanf("%d",&val);
           printf("Enter a pos :");
           scanf("%d",&pos);
           head=insertAtPos(head,pos,val);
        break;
        case 4:
           printf("Enter a pos :");
           scanf("%d",&pos);
           head=deleteAtPos(head,pos);
        break;

        case 5:
           printf("Enter value :");
           scanf("%d",&val);
           head=deleteAtVal(head,val);
        break;

        case 6:
         printf("Enter value to append  :");
           scanf("%d",&val);
           head=append(head,val);
        break;

        case 7:
        printList(head);
        break;
        case 8:
        break;
        default:
        printf("Enter a valid case \n");
    }

    }
}
int main()
{
  operations();
    return 0;
}