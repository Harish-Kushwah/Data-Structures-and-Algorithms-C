slip-1
EX-1:-

/*
Q1.Implement a list library (doublylist.h) for a doubly linked list of integers          
with the create, display operations. Write a menu driven program to call 
these operations.
*/
#include "doublylist.h"
#include<stdio.h>
void menu()
{
    printf("1] Enter to create Doubly LL\n");
    printf("2] ENter to display Double LL\n");
    printf("3] Enter to Exit\n");
}
int main()
{
    menu();
    int n=0;
    Node *head=NULL;
    while(n!=3){
    printf("\nEnter a n :\n");
    scanf("%d",&n);
    switch(n){
     case 1:
        int no_node;
        printf("Enter a how many Nodes you wants to create :\n");
        scanf("%d",&no_node);
        head=createNode(no_node);
        head=insertVal(head);
        if(head!=0){
            printf("Linked List created Successfully:\n");
        }
        else{
            printf("Unable to create Linked List\n");
            //exit(0);
        }
    break;
    case 2:
        printf("Elements of Doubly Linked List: \n");
        printList(head);
    break;
    case 3:
        printf("Program exited Successfully:\n");
        free(head);
        //exit(0);
    break;
    default:
        printf("Enter a valid case :");
    break;
    }
  }
    return 0;
}

---[doublylist.h]----file

#include<stdlib.h>
#include<stdio.h>
typedef struct Node
{
    struct Node* left;
    struct Node* right;
    int val;
}Node;

Node *createNode(int n)
{
    Node *head=NULL,*temp=NULL,*newnode=NULL;
    for(int i=0;i<n;i++){
       newnode=(Node*)malloc(sizeof(Node));
       newnode->left=NULL;
       newnode->right=NULL;
       newnode->val=0;
       if(head==NULL)
       {
        head=temp=newnode;
       }
       else{
          temp->right=newnode;
          newnode->left=temp;
          temp=newnode;
       }
    }
    return head;
}
Node* insertVal(Node *head)
{
    for(Node *temp=head;temp!=NULL;temp=temp->right)
    {
      printf("Enter val :");
      scanf("%d",&temp->val);  
    }
    return head;
}
void printList(Node *head)
{
    for(Node *temp=head;temp!=NULL;temp=temp->right)
    {
        printf("%d ",temp->val);
    }
}
---------------------------------------------------------------------------------------------------------------------------------
EX2
/*
Q2. Write a program that sorts the elements of linked list using any of sorting   
technique.
*/
#include<stdio.h>
#include<stdlib.h>
typedef struct Node
{
    int val;
    struct Node *next;
}Node;
Node *createNode(int n)
{
    Node *head=NULL,*temp=NULL,*newnode=NULL;
    for(int i=0;i<n;i++)
    {
      newnode=(Node *)malloc(sizeof(Node));
      newnode->next=NULL;
      printf("Enter a val :");
      scanf("%d",&newnode->val);
      
      if(head==NULL)
      {
        head=temp=newnode;
      }
      else{
        temp->next=newnode;
        temp=newnode;
      }
    }
    return head;
}
void printList(Node *head)
{
    for(Node *temp=head;temp!=NULL;temp=temp->next)
    {
        printf("%d ",temp->val);
    }
    printf("\n");
}
void swap(int *x,int *y)
{
    int temp=*x;
    *x=*y;
    *y=temp;
}
Node* bubbleSort(Node *head)
{
    for(Node *temp=head;temp!=NULL;temp=temp->next)
    {
        for(Node *temp1=temp;temp1!=NULL;temp1=temp1->next)
        {
            if(temp->val<temp1->val)
            {
                swap(&temp->val,&temp1->val);
            }
        }
    }
    return head;
}
int main()
{
    int n;
    printf("Enter how many nodes wants to create :");
    scanf("%d",&n);
    Node *head=createNode(n);
    printList(head);
    head=bubbleSort(head);
    printList(head);

}
==============================================================================================
SLIP-2
EX-1

/*
Q1. Implement a list library (singlylist.h) for a singly linked list of integer    
with the operations create, display. Write a menu driven program to call   
these operations 
*/
#include<stdio.h>
#include "singlylist.h"
void menu()
{
    printf("1] Enter to create singly LL\n");
    printf("2] ENter to display singly LL\n");
    printf("3] Enter to Exit\n");
}
int main()
{
    menu();
    int n=0;
    Node *head=NULL;
    while(n!=3){
    printf("\nEnter a n :\n");
    scanf("%d",&n);
    switch(n){
     case 1:
        int no_node;
        printf("Enter a how many Nodes you wants to create :\n");
        scanf("%d",&no_node);
        head=createNode(no_node);
        head=insertVal(head);
        if(head!=0){
            printf("Linked List created Successfully:\n");
        }
        else{
            printf("Unable to create Linked List\n");
            //exit(0);
        }
    break;
    case 2:
        if(head==NULL){
           printf("Please create Linked list :\n");
        }
        else{
        printf("Elements of singly Linked List: \n");
        printList(head);
        }
    break;
    case 3:
        printf("Program exited Successfully:\n");
        free(head);
        //exit(0);
    break;
    default:
        printf("Enter a valid case :");
    break;
    }
  }
    return 0;
}

----[singly.h]---file
#include<stdlib.h>
#include<stdio.h>
typedef struct Node
{
    
    struct Node* next;
    int val;
}Node;

Node *createNode(int n)
{
    Node *head=NULL,*temp=NULL,*newnode=NULL;
    for(int i=0;i<n;i++){
       newnode=(Node*)malloc(sizeof(Node));
       newnode->next=NULL;
       newnode->val=0;
       if(head==NULL)
       {
        head=temp=newnode;
       }
       else{
          temp->next=newnode;
          temp=newnode;
       }
    }
    return head;
}
Node* insertVal(Node *head)
{
    for(Node *temp=head;temp!=NULL;temp=temp->next)
    {
      printf("Enter val :");
      scanf("%d",&temp->val);  
    }
    return head;
}
void printList(Node *head)
{
    for(Node *temp=head;temp!=NULL;temp=temp->next)
    {
        printf("%d ",temp->val);
    }
}
====================================================================================================================
SLIP-3
EX-1
/*
Q1. Sort a random array of n integers (accept the value of n from user) in        
 ascending order  by using insertion sort algorithm. 
*/

#include<stdio.h>
void insertionSort(int arr[],int n)
{
    for(int i=1;i<n;i++)
    {
        int temp=arr[i];
        int j=i-1;
        while(j>=0 &&arr[j]>temp){
            arr[j+1]=arr[j];
            j--;
        }
        arr[j+1]=temp;
    }
  for(int i=0;i<n;i++)
  {
    printf("%d ",arr[i]);
  }
}
int main()
{
    int n;
    printf("Enter N :");
    scanf("%d",&n);
    int arr[20];
    printf("Enter array : ");
    for(int i=0;i<n;i++){
        scanf("%d",&arr[i]);
    }
    insertionSort(arr,n);
}
----------------------------------------------------------------------------------------
EX-2
/*
Q2. Write a C program to evaluate postfix expression.

==> Algorithm
   Scan the string 
   if character is a digit then push it into the stack
   else if it is operator pop two element form the stack and apply operation on these operator
   store the result in stack
*/
#include<stdio.h>
#include<stdlib.h>
#define N 30
typedef struct Stack
{
    float arr[N];
    int top;
}Stack;
Stack *init()
{
    Stack *st=(Stack *)malloc(sizeof(Stack));
    st->top=-1;
    return st;
}
int isFull(Stack *st)
{
    return st->top==N-1;
}
int isEmpty(Stack *st)
{
    return st->top==-1;
}
void push(Stack *st,float val)
{
     
    if(!isFull(st))
    {
        st->arr[++st->top]=val;
    }
}
float pop(Stack *st)
{
     
   if(!isEmpty(st))
    {
        return st->arr[st->top--];
    }
}

void evaluate()
{
    char postfix[30];
    printf("Enter postfix exp :");
    scanf("%s",postfix);
    Stack *st=init();
    for(int i=0;postfix[i];i++)
    {
        char sym=postfix[i];

        if(sym>='0'&&sym<='9'){
            push(st,sym-'0');
        }
        else 
        {
            float b=pop(st);
            float a=pop(st);

            if(sym=='+'){
            push(st,a+b);
            }
           else if(sym=='-')
           {
            push(st,a-b);
           }
           else if(sym=='*')
           {
            push(st,a*b);
           }
           else if(sym=='/'){
            push(st,b/a);
           }
        }
    }
    printf("Ans %0.2f",pop(st));
}
int main()
{
    evaluate();
    return 0;
}
===================================================================================================
SLIP-4
EX-1
/*
Q1. Read the ‘n’ numbers from user and sort using bubble sort. 
*/
#include<stdio.h>
void swap(int *x,int *y)
{
    int temp=*x;
    *x=*y;
    *y=temp;
}
int* bubbleSort(int arr[],int n)
{
    for(int i=0;i<n;i++){
        for(int j=0;j<(n-(i+1));j++){
            if(arr[j]<arr[j+1])
            swap(&arr[j],&arr[j+1]);
        }
    }
    return arr;
}
int main()
{
    int n;
    printf("Enter size of N :");
    scanf("%d",&n);
    int arr[10];
    for(int i=0;i<n;i++)
    {
        scanf("%d",&arr[i]);
    }
    int *ar1=bubbleSort(arr,n);
    for(int i=0;i<n;i++){
       printf("%d ",ar1[i]);
    }
}
------------------------------------------------------------------------------------------------------
EX-2
/*
Q2. Write a program to reverse the elements of a queue using queue library.        
Implement basic queue operations init, enqueue, dequeue.
*/
#include<stdio.h>
#include<stdlib.h>

#define N 10
typedef struct Queue
{
    int front;
    int rare;
    int arr[N];
}Queue;
Queue* init()
{
    Queue *q=(Queue*)malloc(sizeof(Queue));
    q->front=-1;
    q->rare=-1;
    return q;
}
int isFull(Queue *q)
{
    return q->rare==N-1;
}
int isEmpty(Queue *q){
    return q->front==q->rare;
}
void enQueue(Queue *q,int val)
{
    if(!isFull(q)){
        q->arr[++q->rare]=val;
    }
    else{
        printf("Queue is Full :");
    }
}

typedef struct Stack
{
    int arr[N];
    int top;
}Stack;
Stack *init1()
{
    Stack *st=(Stack *)malloc(sizeof(Stack));
    st->top=-1;
    return st;
}
void push(Stack *st,int val)
{
    if(st->top!=N-1)
    st->arr[++st->top]=val;
}
int pop(Stack *st)
{
    if(st->top!=-1)
    return st->arr[st->top--];
    return -1;
}

int deQueue(Queue *q)
{
    if(!isEmpty(q)){
        return q->arr[++q->front];
    }
    else{
        printf("Queue is Empty");
        return -1;
    }
}
int main()
{
    Queue *q1=init();
    printf("Enter element in the Queue :\n");
    int n;
    printf("Enter N:");
    scanf("%d",&n);
    for(int i=0;i<n;i++){
        int x;
        printf("Enter element no %d :",i+1);
        scanf("%d",&x);
        enQueue(q1,x);
    }
    Stack *s2=init1();
    
    for(int i=0;i<n;i++){
        push(s2,deQueue(q1));
    }
    for(int i=0;i<n;i++){
        enQueue(q1,pop(s2));
    }   
    for(int i=0;i<n;i++){
        printf("%d \n",deQueue(q1));
    }
    return 0;
}
===========================================================================================================================